import frappe
from frappe import _

def update_quotation_status_on_so_submit(doc, method):
    """
    Hook called on Sales Order submission.
    Updates both the status and custom command status of the linked Quotation.
    """
    # Check if this Sales Order has a linked source Quotation via the custom field 'custom_devis'
    if doc.custom_devis:
        quotation_name = doc.custom_devis
        
        try:
            # Get the current status of the quotation first to avoid unnecessary updates
            current_status = frappe.db.get_value("Quotation", quotation_name, "status")

            if current_status is None:
                # Quotation doesn't exist, log error
                frappe.log_error(f"Source Quotation {quotation_name} not found for Sales Order {doc.name}", "update_quotation_status_on_so_submit")
                return

            # Check if the status is eligible for update (e.g., it's 'Open' or 'Submitted')
            if current_status in ["Open", "Submitted"]:
                # Analyser l'état de commande du devis
                command_analysis = analyze_quotation_command_status(quotation_name)
                
                # Mettre à jour le statut standard
                if command_analysis["is_fully_ordered"]:
                    new_status = "Ordered"
                    status_message = "Commandé"
                else:
                    new_status = "Open"  # Garder "Open" pour les partiels
                    status_message = "Ouvert"
                
                # Mettre à jour les champs
                frappe.db.set_value("Quotation", quotation_name, "status", new_status)
                frappe.db.set_value("Quotation", quotation_name, "custom_statut_commande", command_analysis["custom_status"])
                frappe.db.set_value("Quotation", quotation_name, "modified", frappe.utils.now())
                
                frappe.msgprint(_("Devis {0} mis à jour - Statut: {1}, Commande: {2} ({3}%)").format(
                    quotation_name, status_message, command_analysis["custom_status"], command_analysis["percentage"]
                ))
                
        except Exception as e:
            # Catch potential errors from db.set_value or db.get_value
            frappe.log_error(f"Failed to update Quotation {quotation_name} status from SO {doc.name}: {e}", "update_quotation_status_on_so_submit")
            # Provide feedback to the user
            frappe.msgprint(_("Échec de la mise à jour du statut du Devis lié : {0}").format(e), indicator='red', title=_('Erreur'))

@frappe.whitelist()
def generate_technical_studies(sales_order_name):
    """
    Generate technical studies for each item in the Sales Order.
    For each item:
    1. Get the feasibility request ID from custom_demande_de_faisabilité
    2. Find feasibility studies with status "Réalisable" linked to that request
    3. Extract the "Trace" and "Imposition" IDs
    4. Create technical studies with these IDs and copy the 'custom_retirage' flag.
    """
    try:
        # Get the Sales Order document
        sales_order = frappe.get_doc("Sales Order", sales_order_name)
        
        # Check if the Sales Order has a feasibility request
        if not sales_order.custom_demande_de_faisabilité:
            frappe.msgprint(_("Aucune demande de faisabilité n'est associée à cette commande."), 
                           indicator='yellow', 
                           title=_('Attention'))
            return
        
        # Get the feasibility request ID
        feasibility_request_id = sales_order.custom_demande_de_faisabilité
        
        # Find feasibility studies with status "Réalisable" linked to this request
        feasibility_studies = frappe.get_all(
            "Etude Faisabilite",
            filters={
                "demande_faisabilite": feasibility_request_id,
                "status": "Réalisable"
            },
            fields=["name", "trace", "imposition"]
        )
        
        if not feasibility_studies:
            frappe.msgprint(_("Aucune étude de faisabilité avec statut 'Réalisable' n'a été trouvée pour cette demande."), 
                           indicator='yellow', 
                           title=_('Attention'))
            return
        
        # Counter for created studies
        created_studies = 0
        
        # Calculate due date (creation date + 1 day)
        import datetime
        due_date = datetime.datetime.now() + datetime.timedelta(days=1)
        
        # Get maquettes data from the child table
        maquettes_data = {}
        try:
            # Try to get maquettes directly from the database
            maquettes_list = frappe.get_all(
                "Maquettes Articles Commande",
                filters={"parent": sales_order_name},
                fields=["article", "maquette"]
            )
            
            # Log what we found for debugging
            frappe.log_error(f"Maquettes found for SO {sales_order_name}: {maquettes_list}", "generate_technical_studies")
            
            # Create mapping of item_code to maquette
            for m in maquettes_list:
                if m.article and m.maquette:
                    maquettes_data[m.article] = m.maquette
        except Exception as e:
            frappe.log_error(f"Error retrieving maquettes for SO {sales_order_name}: {e}", "generate_technical_studies")
        
        # For each item in the Sales Order
        for item in sales_order.items:
            # Create a technical study for this item
            technical_study = frappe.new_doc("Etude Technique")
            technical_study.sales_order = sales_order_name
            technical_study.item_code = item.item_code
            technical_study.item_name = item.item_name
            technical_study.qty = item.qty

            # Fix field names to match exactly what the doctype expects
            technical_study.client = sales_order.customer
            technical_study.date_echeance = due_date.strftime('%Y-%m-%d')

            # Set article and quantite fields
            technical_study.article = item.item_code
            technical_study.quantite = item.qty

            # Rechercher un BAT existant pour cet article (priorité au BAT-P Validé)
            existing_bat = frappe.get_all(
                "BAT",
                filters={
                    "article": item.item_code,
                    "status": "BAT-P Validé"
                },
                fields=["name"],
                order_by="date desc",
                limit=1
            )
            
            if existing_bat:
                technical_study.bat = existing_bat[0].name
            else:
                # Si aucun BAT-P Validé, chercher un BAT-E Validé
                existing_bat_e = frappe.get_all(
                    "BAT",
                    filters={
                        "article": item.item_code,
                        "status": "BAT-E Validé"
                    },
                    fields=["name"],
                    order_by="date desc",
                    limit=1
                )
                
                if existing_bat_e:
                    technical_study.bat = existing_bat_e[0].name

            # Set the new fields: commande and demande_faisabilite
            technical_study.commande = sales_order_name
            technical_study.demande_faisabilite = sales_order.custom_demande_de_faisabilité

            # Set the devis field from custom_devis in Sales Order
            if hasattr(sales_order, 'custom_devis') and sales_order.custom_devis:
                technical_study.devis = sales_order.custom_devis

            # --- NOUVEAU : Copier la valeur custom_retirage ---
            # Vérifie si le champ custom_retirage existe et a une valeur (0 ou 1)
            if hasattr(sales_order, 'custom_retirage') and sales_order.custom_retirage is not None:
                 technical_study.is_reprint = sales_order.custom_retirage
            else:
                 technical_study.is_reprint = 0 # Valeur par défaut si non trouvé
            # --- Fin de la modification ---

            # Set maquette if available for this item
            if item.item_code in maquettes_data:
                technical_study.maquette = maquettes_data[item.item_code]

            # Use the first feasibility study that has both trace and imposition
            for study in feasibility_studies:
                if study.trace and study.imposition:
                    technical_study.trace = study.trace
                    technical_study.imposition = study.imposition
                    technical_study.etude_faisabilite = study.name
                    break

            # Save the technical study
            technical_study.insert(ignore_permissions=True)
            created_studies += 1
        
        if created_studies > 0:
            frappe.msgprint(_("{0} étude(s) technique(s) créée(s) avec succès.").format(created_studies), 
                           indicator='green', 
                           title=_('Succès'))
        else:
            frappe.msgprint(_("Aucune étude technique n'a été créée. Vérifiez que les études de faisabilité contiennent des informations de trace et d'imposition."), 
                           indicator='yellow', 
                           title=_('Attention'))
            
    except Exception as e:
        frappe.log_error(f"Failed to generate technical studies for Sales Order {sales_order_name}: {e}", 
                        "generate_technical_studies")
        frappe.msgprint(_("Échec de la génération des études techniques: {0}").format(str(e)), 
                       indicator='red', 
                       title=_('Erreur'))


@frappe.whitelist()
def check_existing_technical_studies(sales_order_name):
    """
    Check if technical studies already exist for any items in this Sales Order.
    Returns:
    - True if any technical studies exist
    - False if no technical studies exist
    """
    # Count technical studies linked to this Sales Order
    count = frappe.db.count("Etude Technique", {"commande": sales_order_name})
    
    # Return True if any exist, False otherwise
    return count > 0

@frappe.whitelist()
def get_technical_studies_for_sales_order(sales_order_name):
    """
    Get all technical studies linked to a specific Sales Order.
    Returns a list of technical studies with their details.
    """
    technical_studies = frappe.get_all(
        "Etude Technique",
        filters={"commande": sales_order_name},
        fields=["name", "status", "article", "nom_article", "technicien", "date_echeance"]
    )
    
    return technical_studies

def validate_bon_de_commande(doc, method):
    """Vérifie si les champs 'custom_bon_de_commande_client' et 'custom_date_bon_de_commande' sont remplis avant la soumission.
    
    Cette fonction est appelée via le hook 'before_submit'.
    """
    if not doc.custom_bon_de_commande_client or not doc.custom_date_bon_de_commande:
        frappe.throw(_("Veuillez renseigner les champs 'Bon de Commande Client' et 'Date Bon de Commande' avant de soumettre la commande."))

def auto_generate_technical_studies_on_submit(doc, method):
    """
    Fonction appelée automatiquement lors de la validation d'une commande client (on_submit).
    Vérifie si des études techniques existent pour chaque article de la commande.
    Si aucune étude technique n'existe, elle les crée automatiquement.
    """
    try:
        # Vérifier si des études techniques existent déjà pour cette commande
        existing_studies_count = frappe.db.count("Etude Technique", {"commande": doc.name})
        
        if existing_studies_count == 0:
            # Aucune étude technique n'existe, les créer automatiquement
            frappe.log_error(f"Auto-generating technical studies for Sales Order {doc.name}", "auto_generate_technical_studies")
            
            # Vérifier si la commande a une demande de faisabilité associée
            if not doc.custom_demande_de_faisabilité:
                frappe.log_error(f"Sales Order {doc.name} has no feasibility request linked", "auto_generate_technical_studies")
                return
            
            # Obtenir l'ID de la demande de faisabilité
            feasibility_request_id = doc.custom_demande_de_faisabilité
            
            # Trouver les études de faisabilité avec statut "Réalisable" liées à cette demande
            feasibility_studies = frappe.get_all(
                "Etude Faisabilite",
                filters={
                    "demande_faisabilite": feasibility_request_id,
                    "status": "Réalisable"
                },
                fields=["name", "trace", "imposition"]
            )
            
            if not feasibility_studies:
                frappe.log_error(f"No feasible studies found for feasibility request {feasibility_request_id}", "auto_generate_technical_studies")
                return
            
            # Compteur pour les études créées
            created_studies = 0
            
            # Calculer la date d'échéance (date de création + 1 jour)
            import datetime
            due_date = datetime.datetime.now() + datetime.timedelta(days=1)
            
            # Obtenir les données des maquettes depuis la table enfant
            maquettes_data = {}
            try:
                maquettes_list = frappe.get_all(
                    "Maquettes Articles Commande",
                    filters={"parent": doc.name},
                    fields=["article", "maquette"]
                )
                
                # Créer un mapping article_code -> maquette
                for m in maquettes_list:
                    if m.article and m.maquette:
                        maquettes_data[m.article] = m.maquette
            except Exception as e:
                frappe.log_error(f"Error retrieving maquettes for SO {doc.name}: {e}", "auto_generate_technical_studies")
            
            # Pour chaque article dans la commande
            for item in doc.items:
                # Créer une étude technique pour cet article
                technical_study = frappe.new_doc("Etude Technique")
                technical_study.sales_order = doc.name
                technical_study.item_code = item.item_code
                technical_study.item_name = item.item_name
                technical_study.qty = item.qty
                
                # Définir les champs client et date d'échéance
                technical_study.client = doc.customer
                technical_study.date_echeance = due_date.strftime('%Y-%m-%d')
                
                # Définir les champs article et quantité
                technical_study.article = item.item_code
                technical_study.quantite = item.qty
                
                # Rechercher un BAT existant pour cet article (priorité au BAT-P Validé)
                existing_bat = frappe.get_all(
                    "BAT",
                    filters={
                        "article": item.item_code,
                        "status": "BAT-P Validé"
                    },
                    fields=["name"],
                    order_by="date desc",
                    limit=1
                )
                
                if existing_bat:
                    technical_study.bat = existing_bat[0].name
                else:
                    # Si aucun BAT-P Validé, chercher un BAT-E Validé
                    existing_bat_e = frappe.get_all(
                        "BAT",
                        filters={
                            "article": item.item_code,
                            "status": "BAT-E Validé"
                        },
                        fields=["name"],
                        order_by="date desc",
                        limit=1
                    )
                    
                    if existing_bat_e:
                        technical_study.bat = existing_bat_e[0].name
                
                # Définir les nouveaux champs : commande et demande_faisabilite
                technical_study.commande = doc.name
                technical_study.demande_faisabilite = doc.custom_demande_de_faisabilité
                
                # Définir le champ devis depuis custom_devis dans la commande
                if hasattr(doc, 'custom_devis') and doc.custom_devis:
                    technical_study.devis = doc.custom_devis
                
                # Copier la valeur custom_retirage
                if hasattr(doc, 'custom_retirage') and doc.custom_retirage is not None:
                    technical_study.is_reprint = doc.custom_retirage
                else:
                    technical_study.is_reprint = 0
                
                # Définir la maquette si disponible pour cet article
                if item.item_code in maquettes_data:
                    technical_study.maquette = maquettes_data[item.item_code]
                
                # Utiliser la première étude de faisabilité qui a à la fois trace et imposition
                for study in feasibility_studies:
                    if study.trace and study.imposition:
                        technical_study.trace = study.trace
                        technical_study.imposition = study.imposition
                        technical_study.etude_faisabilite = study.name
                        break
                
                # Sauvegarder l'étude technique
                technical_study.insert(ignore_permissions=True)
                created_studies += 1
            
            if created_studies > 0:
                frappe.msgprint(_("{0} étude(s) technique(s) créée(s) automatiquement lors de la validation de la commande.").format(created_studies), 
                               indicator='green', 
                               title=_('Études Techniques Créées'))
                frappe.log_error(f"Successfully auto-generated {created_studies} technical studies for Sales Order {doc.name}", "auto_generate_technical_studies")
        else:
            # Des études techniques existent déjà
            frappe.log_error(f"Technical studies already exist for Sales Order {doc.name} ({existing_studies_count} found)", "auto_generate_technical_studies")
            
    except Exception as e:
        frappe.log_error(f"Failed to auto-generate technical studies for Sales Order {doc.name}: {e}", 
                        "auto_generate_technical_studies")
        # Ne pas faire échouer la validation de la commande si la création des études techniques échoue
        frappe.msgprint(_("Attention : Échec de la création automatique des études techniques. Vous pouvez les créer manuellement via le bouton 'Créer Études Techniques'."), 
                       indicator='orange', 
                       title=_('Avertissement'))


def analyze_quotation_command_status(quotation_name):
    """
    Analyse complète de l'état de commande d'un devis
    Retourne un dictionnaire avec toutes les informations nécessaires
    """
    # Récupérer tous les articles du devis
    quotation_items = frappe.get_all(
        "Quotation Item",
        filters={"parent": quotation_name},
        fields=["item_code", "qty", "rate"]
    )
    
    if not quotation_items:
        return {
            "is_fully_ordered": False,
            "custom_status": "Non commandé",
            "percentage": 0,
            "total_items": 0,
            "ordered_items": 0,
            "remaining_items": []
        }
    
    total_items = len(quotation_items)
    ordered_items = 0
    remaining_items = []
    
    # Analyser chaque article
    for item in quotation_items:
        ordered_qty = get_total_ordered_qty_for_item(quotation_name, item.item_code)
        
        if ordered_qty >= item.qty:
            ordered_items += 1
        else:
            remaining_qty = item.qty - ordered_qty
            remaining_items.append({
                "item_code": item.item_code,
                "remaining_qty": remaining_qty,
                "ordered_qty": ordered_qty,
                "total_qty": item.qty
            })
    
    # Calculer le pourcentage
    percentage = round((ordered_items / total_items) * 100, 1)
    
    # Déterminer le statut personnalisé
    if percentage == 100:
        custom_status = "Entièrement commandé"
        is_fully_ordered = True
    elif percentage > 0:
        custom_status = "Partiellement commandé"
        is_fully_ordered = False
    else:
        custom_status = "Non commandé"
        is_fully_ordered = False
    
    return {
        "is_fully_ordered": is_fully_ordered,
        "custom_status": custom_status,
        "percentage": percentage,
        "total_items": total_items,
        "ordered_items": ordered_items,
        "remaining_items": remaining_items,
        "has_draft_orders": get_draft_orders_count(quotation_name) > 0,
        "draft_orders_count": get_draft_orders_count(quotation_name)
    }


def get_total_ordered_qty_for_item(quotation_name, item_code):
    """
    Calcule la quantité totale commandée pour un article donné
    Prend en compte TOUTES les commandes liées (même celles en brouillon)
    """
    # Récupérer TOUTES les commandes liées (brouillon ET soumises)
    sales_orders = frappe.get_all(
        "Sales Order",
        filters={"custom_devis": quotation_name, "docstatus": ["!=", 2]},  # Exclure seulement les annulées
        fields=["name", "docstatus"]
    )
    
    total_qty = 0
    for so in sales_orders:
        so_items = frappe.get_all(
            "Sales Order Item",
            filters={"parent": so.name, "item_code": item_code},
            fields=["qty"]
        )
        total_qty += sum(item.qty for item in so_items)
    
    return total_qty


def get_draft_orders_count(quotation_name):
    """
    Compte le nombre de commandes en brouillon liées au devis
    """
    count = frappe.db.count(
        "Sales Order",
        filters={"custom_devis": quotation_name, "docstatus": 0}
    )
    return count


@frappe.whitelist()
def get_quotation_command_details(quotation_name):
    """
    API pour récupérer les détails de commande d'un devis
    """
    return analyze_quotation_command_status(quotation_name)


@frappe.whitelist()
def get_validated_command_status(quotation_name):
    """
    Calcule le statut de commande basé uniquement sur les commandes validées (docstatus = 1)
    """
    try:
        # Récupérer seulement les commandes validées
        sales_orders = frappe.get_all(
            "Sales Order",
            filters={"custom_devis": quotation_name, "docstatus": 1},
            fields=["name"]
        )
        
        if not sales_orders:
            return {
                "custom_status": "Non commandé",
                "percentage": 0,
                "validated_orders_count": 0
            }
        
        # Récupérer les articles du devis original
        quotation_items = frappe.get_all(
            "Quotation Item",
            filters={"parent": quotation_name},
            fields=["item_code", "qty"]
        )
        
        if not quotation_items:
            return {
                "custom_status": "Non commandé", 
                "percentage": 0,
                "validated_orders_count": len(sales_orders)
            }
        
        # Calculer les quantités commandées pour chaque article (uniquement commandes validées)
        ordered_items = {}
        for item in quotation_items:
            item_code = item.item_code
            total_ordered = 0
            
            for so in sales_orders:
                so_items = frappe.get_all(
                    "Sales Order Item",
                    filters={"parent": so.name, "item_code": item_code},
                    fields=["qty"]
                )
                total_ordered += sum(item.qty for item in so_items)
            
            ordered_items[item_code] = {
                "quotation_qty": item.qty,
                "ordered_qty": total_ordered
            }
        
        # Déterminer le statut
        fully_ordered_items = 0
        partially_ordered_items = 0
        
        for item_code, data in ordered_items.items():
            if data["ordered_qty"] >= data["quotation_qty"]:
                fully_ordered_items += 1
            elif data["ordered_qty"] > 0:
                partially_ordered_items += 1
        
        total_items = len(quotation_items)
        
        if fully_ordered_items == total_items:
            custom_status = "Entièrement commandé"
            percentage = 100
        elif fully_ordered_items > 0 or partially_ordered_items > 0:
            custom_status = "Partiellement commandé"
            # Calculer le pourcentage basé sur les quantités totales
            total_quotation_qty = sum(item["quotation_qty"] for item in ordered_items.values())
            total_ordered_qty = sum(item["ordered_qty"] for item in ordered_items.values())
            percentage = min(100, int((total_ordered_qty / total_quotation_qty) * 100)) if total_quotation_qty > 0 else 0
        else:
            custom_status = "Non commandé"
            percentage = 0
        
        return {
            "custom_status": custom_status,
            "percentage": percentage,
            "validated_orders_count": len(sales_orders),
            "ordered_items": ordered_items
        }
        
    except Exception as e:
        frappe.log_error(f"Failed to calculate validated command status for quotation {quotation_name}: {e}", 
                        "get_validated_command_status")
        return {
            "custom_status": "Non commandé",
            "percentage": 0,
            "validated_orders_count": 0
        }


@frappe.whitelist()
def get_linked_sales_orders_for_quotation(quotation_name):
    """
    Récupère toutes les commandes liées à un devis avec leurs détails
    """
    try:
        # Récupérer toutes les commandes liées (brouillon ET soumises)
        sales_orders = frappe.get_all(
            "Sales Order",
            filters={"custom_devis": quotation_name, "docstatus": ["!=", 2]},  # Exclure les annulées
            fields=["name", "status", "docstatus", "creation", "grand_total", "delivery_date", 
                   "custom_date_bon_de_commande", "custom_bon_de_commande_client"],
            order_by="creation desc"
        )
        
        # Analyser l'état de commande du devis
        command_analysis = analyze_quotation_command_status(quotation_name)
        
        # Enrichir les données des commandes
        enriched_orders = []
        for so in sales_orders:
            # Déterminer le statut affiché
            if so.docstatus == 0:
                display_status = "Brouillon"
            else:
                display_status = so.status
            
            # Récupérer les articles de cette commande
            so_items = frappe.get_all(
                "Sales Order Item",
                filters={"parent": so.name},
                fields=["item_code", "item_name", "qty", "rate", "amount"],
                order_by="idx"
            )
            
            enriched_orders.append({
                "name": so.name,
                "status": display_status,
                "docstatus": so.docstatus,
                "creation": so.creation,
                "grand_total": so.grand_total,
                "delivery_date": so.delivery_date,
                "custom_date_bon_de_commande": so.custom_date_bon_de_commande,
                "custom_bon_de_commande_client": so.custom_bon_de_commande_client,
                "items_count": len(so_items),
                "items": so_items[:3],  # Limiter à 3 items pour l'affichage
                "has_more_items": len(so_items) > 3
            })
        
        return {
            "sales_orders": enriched_orders,
            "command_analysis": command_analysis,
            "total_orders": len(enriched_orders),
            "draft_orders": len([so for so in enriched_orders if so["docstatus"] == 0]),
            "submitted_orders": len([so for so in enriched_orders if so["docstatus"] == 1])
        }
        
    except Exception as e:
        frappe.log_error(f"Failed to get linked sales orders for quotation {quotation_name}: {e}", 
                        "get_linked_sales_orders_for_quotation")
        return {
            "sales_orders": [],
            "command_analysis": {"custom_status": "Non commandé", "percentage": 0},
            "total_orders": 0,
            "draft_orders": 0,
            "submitted_orders": 0
        }

